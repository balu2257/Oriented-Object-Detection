# -*- coding: utf-8 -*-
"""Oriented Object Detection.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xKr-DLyl28Hm1g9JorUKD5YrNvd5Z44v
"""

!pip install ultralytics

import ultralytics
ultralytics.__version__

"""# Model Training"""

from ultralytics import YOLO

# Load a model
model = YOLO('yolov8n-obb.pt')
results = model.train(data='DOTAv1.yaml', epochs=100,imgsz=640)

from google.colab import drive
drive.mount('/content/drive')

"""# Model Evaluation and Validation"""

from ultralytics import YOLO


model = YOLO('/content/yolov8n-obb.pt')


metrics = model.val(data='dota8.yaml')
print(metrics.box.map)
print(metrics.box.map50)
print(metrics.box.map75)
print(metrics.box.maps)

"""# Testing of Model"""

from ultralytics import YOLO

# Load a model
model = YOLO('yolov8x-obb.pt')  # load an official model

# Predict with the model
results = model("/content/drive/MyDrive/images (1)/images",imgsz=640, save=True)

"""# Visualisation

"""

import matplotlib.pyplot as plt
import cv2
import os

output_dir = "runs/obb/predict"
image_files = [os.path.join(output_dir, img) for img in os.listdir(output_dir) if img.endswith('.jpg') or img.endswith('.png')]

for image_file in image_files:
    img = cv2.imread(image_file)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.axis('off')
    plt.show()